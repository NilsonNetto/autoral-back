generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ItemsName {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime? @db.Timestamp(6)
  Items     Items[]
}

model Lists {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  finished    Boolean       @default(false)
  createdAt   DateTime      @default(now()) @db.Timestamp(6)
  updatedAt   DateTime?     @db.Timestamp(6)
  ListsLocals ListsLocals[]
  UsersLists  UsersLists[]
}

model Items {
  id           Int         @id @default(autoincrement())
  listLocalsId Int
  itemId       Int
  checked      Boolean     @default(false)
  quantity     Int?
  unit         ItemUnit    @default(un)
  createdAt    DateTime    @default(now()) @db.Timestamp(6)
  updatedAt    DateTime?   @db.Timestamp(6)
  ItemName     ItemsName   @relation(fields: [itemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ListsLocals  ListsLocals @relation(fields: [listLocalsId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ListsLocals {
  id         Int        @id @default(autoincrement())
  listId     Int
  localId    Int
  finished   Boolean    @default(false)
  createdAt  DateTime   @default(now()) @db.Timestamp(6)
  updatedAt  DateTime?  @db.Timestamp(6)
  Lists      Lists      @relation(fields: [listId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  LocalsName LocalsName @relation(fields: [localId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Items      Items[]
}

model LocalsName {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  createdAt   DateTime      @default(now()) @db.Timestamp(6)
  updatedAt   DateTime?     @db.Timestamp(6)
  ListsLocals ListsLocals[]
}

model Sessions {
  id        Int       @id @default(autoincrement())
  userId    Int
  token     String
  valid     Boolean   @default(true)
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime? @db.Timestamp(6)
  Users     Users     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Users {
  id             Int          @id @default(autoincrement())
  email          String       @unique @db.VarChar(255)
  password       String
  name           String       @db.VarChar(255)
  profilePicture String?
  createdAt      DateTime     @default(now()) @db.Timestamp(6)
  updatedAt      DateTime?    @db.Timestamp(6)
  Sessions       Sessions[]
  UsersLists     UsersLists[]
}

model UsersLists {
  id        Int       @id @default(autoincrement())
  userId    Int
  listId    Int
  owner     Boolean
  shared    Boolean
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime? @db.Timestamp(6)
  Lists     Lists     @relation(fields: [listId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Users     Users     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum ItemUnit {
  kgs
  un
}
